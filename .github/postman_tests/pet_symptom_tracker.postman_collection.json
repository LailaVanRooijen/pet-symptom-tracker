{
	"info": {
		"_postman_id": "93db67e1-7c3b-4381-bb98-b963605c0aab",
		"name": "pet_symptom_tracker",
		"description": "Testing endpoints for pet symptom tracker app",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23667563"
	},
	"item": [
		{
			"name": "all_users_as_admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();\r",
							"\r",
							"if (responseData.length > 0) {\r",
							"    pm.globals.set(\"individual_user_id\", responseData[0].id);\r",
							"}\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is within acceptable range\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - id, username, email, and enabled\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    \r",
							"    responseData.forEach(function(user) {\r",
							"        pm.expect(user).to.have.property('id');\r",
							"        pm.expect(user).to.have.property('username');\r",
							"        pm.expect(user).to.have.property('email');\r",
							"        pm.expect(user).to.have.property('enabled');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    responseData.forEach(function(user) {\r",
							"        pm.expect(user.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should be a non-empty string\");\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Email is in a valid email format\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    responseData.forEach(function(user) {\r",
							"        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email is not in a valid format\");\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token_admin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "all_users_as_moderator",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    \r",
							"    responseData.forEach(function(user) {\r",
							"        pm.expect(user).to.have.property('id');\r",
							"        pm.expect(user).to.have.property('username');\r",
							"        pm.expect(user).to.have.property('email');\r",
							"        pm.expect(user).to.have.property('enabled');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id, username, and email are non-empty strings\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
							"  \r",
							"  responseData.forEach(function(user) {\r",
							"    pm.expect(user.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should not be empty\");\r",
							"    pm.expect(user.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");\r",
							"    pm.expect(user.email).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Email should not be empty\");\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Enabled property should be a boolean value\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    responseData.forEach(function(user) {\r",
							"        pm.expect(user.enabled).to.be.a('boolean');\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token_moderator}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "all_users_as_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 403\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(403);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData).to.have.property('type');\r",
							"  pm.expect(responseData).to.have.property('title');\r",
							"  pm.expect(responseData).to.have.property('status');\r",
							"  pm.expect(responseData).to.have.property('detail');\r",
							"  pm.expect(responseData).to.have.property('instance');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type is application/problem+json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token_user}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_user_by_id_as_admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.to.have.status(200));\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - id, username, email, enabled\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('id');\r",
							"    pm.expect(responseData).to.have.property('username');\r",
							"    pm.expect(responseData).to.have.property('email');\r",
							"    pm.expect(responseData).to.have.property('enabled');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Username is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Email is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.email).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Email should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"First name and last name should be either null or non-empty strings\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.firstName).to.satisfy((val) => val === null || typeof val === 'string');\r",
							"    pm.expect(responseData.lastName).to.satisfy((val) => val === null || typeof val === 'string');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token_admin}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/users/{{individual_user_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"{{individual_user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_user_by_id_as_Moderator",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response Content-Type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is within an acceptable range\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - id, username, email, and enabled\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('id');\r",
							"    pm.expect(responseData).to.have.property('username');\r",
							"    pm.expect(responseData).to.have.property('email');\r",
							"    pm.expect(responseData).to.have.property('enabled');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id, username, and email are non-empty strings\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Id should not be empty\");\r",
							"    pm.expect(responseData.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");\r",
							"    pm.expect(responseData.email).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Email should not be empty\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token_moderator}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/users/{{individual_user_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"{{individual_user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_user_by_id_as_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 403\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(403);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/problem+json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/problem+json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.type).to.exist;\r",
							"    pm.expect(responseData.title).to.exist;\r",
							"    pm.expect(responseData.status).to.exist;\r",
							"    pm.expect(responseData.detail).to.exist;\r",
							"    pm.expect(responseData.instance).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Type, title, status, and detail are non-empty strings\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.type).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Type should not be empty\");\r",
							"    pm.expect(responseData.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
							"    pm.expect(responseData.status).to.be.a('number', \"Status should be a number\"); \r",
							"    pm.expect(responseData.status).to.eql(403, \"Status should be 403\"); \r",
							"    pm.expect(responseData.detail).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Detail should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token_user}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/users/{{individual_user_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"users",
						"{{individual_user_id}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer"
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"function loginAndSetToken(username, password, variableName) {\r",
					"    pm.sendRequest({\r",
					"        url: 'http://localhost:8080/api/v1/auth/login',\r",
					"        method: 'POST',\r",
					"        header: {\r",
					"            'Content-Type': 'application/json'\r",
					"        },\r",
					"        body: {\r",
					"            mode: 'raw',\r",
					"            raw: JSON.stringify({\r",
					"                'username': username,\r",
					"                'password': password\r",
					"            })\r",
					"        }\r",
					"    }, function (error, response) {\r",
					"        if (error) {\r",
					"            console.log(\"Error fetching token for \" + username + \":\", error);\r",
					"        } else {\r",
					"            var json = response.json();\r",
					"            pm.globals.set(variableName, json.token);\r",
					"            console.log(\"Token set for \" + username);\r",
					"        }\r",
					"    });\r",
					"}\r",
					"\r",
					"loginAndSetToken(\"Admin\", pm.environment.get(\"password\"), \"jwt_token_admin\");\r",
					"loginAndSetToken(\"Moderator\", pm.environment.get(\"password\"), \"jwt_token_moderator\");\r",
					"loginAndSetToken(\"User\", pm.environment.get(\"password\"), \"jwt_token_user\");\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}